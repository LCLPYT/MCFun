import org.ajoberstar.grgit.Tag

plugins {
	id 'fabric-loom' version '0.6-SNAPSHOT'
	id 'maven-publish'
	id 'org.ajoberstar.grgit' version '4.1.0'
}

def privateProps = new Properties()
def privatePropsFile = file("private.properties");
if(privatePropsFile.exists())
	privatePropsFile.withInputStream { privateProps.load(it) }

ext {
	getHeadId = {
		return grgit.head().abbreviatedId;
	}
	getHeadTag = {
		def headId = grgit.head().id
		def headTag = null

		grgit.tag.list().forEach {
			def tag = it as Tag
			if(tag.commit.id == headId) headTag = tag;
		}

		return headTag
	}
	PRIVATE = privateProps
}

def getVersion(boolean strict = false) {
	def headTag = rootProject.ext.getHeadTag()
	def tagName = null
	if (headTag != null && (tagName = headTag.name).matches('^v[0-9]+\\.[0-9]+\\.[0-9]+$')) {
		return (tagName as String).substring(1)
	} else {
		if(strict) {
			if (headTag == null) throw new IllegalStateException("Commit HEAD is not tagged.")
			else throw new IllegalStateException("Commit HEAD tag '${tagName}' does not meet the required versioning scheme.")
		} else return "dev-${rootProject.ext.getHeadId()}"
	}
}

archivesBaseName = project.archives_base_name
version getVersion()
group project.maven_group

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
	accessWidener = file("src/main/resources/mcfun.accesswidener") as File
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	implementation 'com.google.code.findbugs:jsr305:3.0.0'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible())
		it.options.release.set(targetVersion)
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

tasks.publish.dependsOn({
	def versionTest = getVersion(true)
	println("Publishing version '${versionTest}'...")
})

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = project.archives_base_name

			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}

			pom {
				name = 'MCFun'
				description = 'A fabric mod for Minecraft to add some random stuff.'
			}
		}
	}

	repositories {
		maven {
			if (privateProps.containsKey('mavenPassword')
					&& privateProps.containsKey('mavenHost')
					&& privateProps.containsKey('mavenUser')) {
				credentials {
					username privateProps.getProperty('mavenUser');
					password privateProps.getProperty('mavenPassword');
				}
				url privateProps.getProperty('mavenHost');
			} else {
				url "file:///${project.projectDir}/repo"
			}
		}
	}
}
